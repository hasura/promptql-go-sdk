/*
PromptQL API

PromptQL API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AssistantAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantAction{}

// AssistantAction struct for AssistantAction
type AssistantAction struct {
	Message NullableString `json:"message,omitempty"`
	Plan NullableString `json:"plan,omitempty"`
	Code NullableString `json:"code,omitempty"`
	CodeOutput NullableString `json:"code_output,omitempty"`
	CodeError NullableString `json:"code_error,omitempty"`
}

// NewAssistantAction instantiates a new AssistantAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantAction() *AssistantAction {
	this := AssistantAction{}
	return &this
}

// NewAssistantActionWithDefaults instantiates a new AssistantAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantActionWithDefaults() *AssistantAction {
	this := AssistantAction{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantAction) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantAction) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *AssistantAction) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *AssistantAction) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *AssistantAction) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *AssistantAction) UnsetMessage() {
	o.Message.Unset()
}

// GetPlan returns the Plan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantAction) GetPlan() string {
	if o == nil || IsNil(o.Plan.Get()) {
		var ret string
		return ret
	}
	return *o.Plan.Get()
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantAction) GetPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plan.Get(), o.Plan.IsSet()
}

// HasPlan returns a boolean if a field has been set.
func (o *AssistantAction) HasPlan() bool {
	if o != nil && o.Plan.IsSet() {
		return true
	}

	return false
}

// SetPlan gets a reference to the given NullableString and assigns it to the Plan field.
func (o *AssistantAction) SetPlan(v string) {
	o.Plan.Set(&v)
}
// SetPlanNil sets the value for Plan to be an explicit nil
func (o *AssistantAction) SetPlanNil() {
	o.Plan.Set(nil)
}

// UnsetPlan ensures that no value is present for Plan, not even an explicit nil
func (o *AssistantAction) UnsetPlan() {
	o.Plan.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantAction) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantAction) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *AssistantAction) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *AssistantAction) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *AssistantAction) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *AssistantAction) UnsetCode() {
	o.Code.Unset()
}

// GetCodeOutput returns the CodeOutput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantAction) GetCodeOutput() string {
	if o == nil || IsNil(o.CodeOutput.Get()) {
		var ret string
		return ret
	}
	return *o.CodeOutput.Get()
}

// GetCodeOutputOk returns a tuple with the CodeOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantAction) GetCodeOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CodeOutput.Get(), o.CodeOutput.IsSet()
}

// HasCodeOutput returns a boolean if a field has been set.
func (o *AssistantAction) HasCodeOutput() bool {
	if o != nil && o.CodeOutput.IsSet() {
		return true
	}

	return false
}

// SetCodeOutput gets a reference to the given NullableString and assigns it to the CodeOutput field.
func (o *AssistantAction) SetCodeOutput(v string) {
	o.CodeOutput.Set(&v)
}
// SetCodeOutputNil sets the value for CodeOutput to be an explicit nil
func (o *AssistantAction) SetCodeOutputNil() {
	o.CodeOutput.Set(nil)
}

// UnsetCodeOutput ensures that no value is present for CodeOutput, not even an explicit nil
func (o *AssistantAction) UnsetCodeOutput() {
	o.CodeOutput.Unset()
}

// GetCodeError returns the CodeError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantAction) GetCodeError() string {
	if o == nil || IsNil(o.CodeError.Get()) {
		var ret string
		return ret
	}
	return *o.CodeError.Get()
}

// GetCodeErrorOk returns a tuple with the CodeError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantAction) GetCodeErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CodeError.Get(), o.CodeError.IsSet()
}

// HasCodeError returns a boolean if a field has been set.
func (o *AssistantAction) HasCodeError() bool {
	if o != nil && o.CodeError.IsSet() {
		return true
	}

	return false
}

// SetCodeError gets a reference to the given NullableString and assigns it to the CodeError field.
func (o *AssistantAction) SetCodeError(v string) {
	o.CodeError.Set(&v)
}
// SetCodeErrorNil sets the value for CodeError to be an explicit nil
func (o *AssistantAction) SetCodeErrorNil() {
	o.CodeError.Set(nil)
}

// UnsetCodeError ensures that no value is present for CodeError, not even an explicit nil
func (o *AssistantAction) UnsetCodeError() {
	o.CodeError.Unset()
}

func (o AssistantAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Plan.IsSet() {
		toSerialize["plan"] = o.Plan.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.CodeOutput.IsSet() {
		toSerialize["code_output"] = o.CodeOutput.Get()
	}
	if o.CodeError.IsSet() {
		toSerialize["code_error"] = o.CodeError.Get()
	}
	return toSerialize, nil
}

type NullableAssistantAction struct {
	value *AssistantAction
	isSet bool
}

func (v NullableAssistantAction) Get() *AssistantAction {
	return v.value
}

func (v *NullableAssistantAction) Set(val *AssistantAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantAction(val *AssistantAction) *NullableAssistantAction {
	return &NullableAssistantAction{value: val, isSet: true}
}

func (v NullableAssistantAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


