/*
PromptQL API

PromptQL API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VisualizationArtifactData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationArtifactData{}

// VisualizationArtifactData Data structure for visualization artifacts containing HTML and associated data.  Attributes:     html: The HTML markup for rendering the visualization     visualization_data: The underlying data used to generate the visualization
type VisualizationArtifactData struct {
	Html string `json:"html"`
	VisualizationData interface{} `json:"visualization_data"`
}

type _VisualizationArtifactData VisualizationArtifactData

// NewVisualizationArtifactData instantiates a new VisualizationArtifactData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationArtifactData(html string, visualizationData interface{}) *VisualizationArtifactData {
	this := VisualizationArtifactData{}
	this.Html = html
	this.VisualizationData = visualizationData
	return &this
}

// NewVisualizationArtifactDataWithDefaults instantiates a new VisualizationArtifactData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationArtifactDataWithDefaults() *VisualizationArtifactData {
	this := VisualizationArtifactData{}
	return &this
}

// GetHtml returns the Html field value
func (o *VisualizationArtifactData) GetHtml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Html
}

// GetHtmlOk returns a tuple with the Html field value
// and a boolean to check if the value has been set.
func (o *VisualizationArtifactData) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Html, true
}

// SetHtml sets field value
func (o *VisualizationArtifactData) SetHtml(v string) {
	o.Html = v
}

// GetVisualizationData returns the VisualizationData field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VisualizationArtifactData) GetVisualizationData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.VisualizationData
}

// GetVisualizationDataOk returns a tuple with the VisualizationData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VisualizationArtifactData) GetVisualizationDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VisualizationData) {
		return nil, false
	}
	return &o.VisualizationData, true
}

// SetVisualizationData sets field value
func (o *VisualizationArtifactData) SetVisualizationData(v interface{}) {
	o.VisualizationData = v
}

func (o VisualizationArtifactData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationArtifactData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["html"] = o.Html
	if o.VisualizationData != nil {
		toSerialize["visualization_data"] = o.VisualizationData
	}
	return toSerialize, nil
}

func (o *VisualizationArtifactData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"html",
		"visualization_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisualizationArtifactData := _VisualizationArtifactData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVisualizationArtifactData)

	if err != nil {
		return err
	}

	*o = VisualizationArtifactData(varVisualizationArtifactData)

	return err
}

type NullableVisualizationArtifactData struct {
	value *VisualizationArtifactData
	isSet bool
}

func (v NullableVisualizationArtifactData) Get() *VisualizationArtifactData {
	return v.value
}

func (v *NullableVisualizationArtifactData) Set(val *VisualizationArtifactData) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationArtifactData) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationArtifactData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationArtifactData(val *VisualizationArtifactData) *NullableVisualizationArtifactData {
	return &NullableVisualizationArtifactData{value: val, isSet: true}
}

func (v NullableVisualizationArtifactData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationArtifactData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


