/*
PromptQL API

PromptQL API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LlmUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LlmUsage{}

// LlmUsage struct for LlmUsage
type LlmUsage struct {
	Provider *string `json:"provider,omitempty"`
	Model *string `json:"model,omitempty"`
	InputTokens *int32 `json:"input_tokens,omitempty"`
	OutputTokens *int32 `json:"output_tokens,omitempty"`
}

// NewLlmUsage instantiates a new LlmUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLlmUsage() *LlmUsage {
	this := LlmUsage{}
	var provider string = "unknown"
	this.Provider = &provider
	var model string = "unknown"
	this.Model = &model
	var inputTokens int32 = 0
	this.InputTokens = &inputTokens
	var outputTokens int32 = 0
	this.OutputTokens = &outputTokens
	return &this
}

// NewLlmUsageWithDefaults instantiates a new LlmUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLlmUsageWithDefaults() *LlmUsage {
	this := LlmUsage{}
	var provider string = "unknown"
	this.Provider = &provider
	var model string = "unknown"
	this.Model = &model
	var inputTokens int32 = 0
	this.InputTokens = &inputTokens
	var outputTokens int32 = 0
	this.OutputTokens = &outputTokens
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *LlmUsage) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmUsage) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *LlmUsage) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *LlmUsage) SetProvider(v string) {
	o.Provider = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *LlmUsage) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmUsage) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *LlmUsage) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *LlmUsage) SetModel(v string) {
	o.Model = &v
}

// GetInputTokens returns the InputTokens field value if set, zero value otherwise.
func (o *LlmUsage) GetInputTokens() int32 {
	if o == nil || IsNil(o.InputTokens) {
		var ret int32
		return ret
	}
	return *o.InputTokens
}

// GetInputTokensOk returns a tuple with the InputTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmUsage) GetInputTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.InputTokens) {
		return nil, false
	}
	return o.InputTokens, true
}

// HasInputTokens returns a boolean if a field has been set.
func (o *LlmUsage) HasInputTokens() bool {
	if o != nil && !IsNil(o.InputTokens) {
		return true
	}

	return false
}

// SetInputTokens gets a reference to the given int32 and assigns it to the InputTokens field.
func (o *LlmUsage) SetInputTokens(v int32) {
	o.InputTokens = &v
}

// GetOutputTokens returns the OutputTokens field value if set, zero value otherwise.
func (o *LlmUsage) GetOutputTokens() int32 {
	if o == nil || IsNil(o.OutputTokens) {
		var ret int32
		return ret
	}
	return *o.OutputTokens
}

// GetOutputTokensOk returns a tuple with the OutputTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LlmUsage) GetOutputTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.OutputTokens) {
		return nil, false
	}
	return o.OutputTokens, true
}

// HasOutputTokens returns a boolean if a field has been set.
func (o *LlmUsage) HasOutputTokens() bool {
	if o != nil && !IsNil(o.OutputTokens) {
		return true
	}

	return false
}

// SetOutputTokens gets a reference to the given int32 and assigns it to the OutputTokens field.
func (o *LlmUsage) SetOutputTokens(v int32) {
	o.OutputTokens = &v
}

func (o LlmUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LlmUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.InputTokens) {
		toSerialize["input_tokens"] = o.InputTokens
	}
	if !IsNil(o.OutputTokens) {
		toSerialize["output_tokens"] = o.OutputTokens
	}
	return toSerialize, nil
}

type NullableLlmUsage struct {
	value *LlmUsage
	isSet bool
}

func (v NullableLlmUsage) Get() *LlmUsage {
	return v.value
}

func (v *NullableLlmUsage) Set(val *LlmUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableLlmUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableLlmUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLlmUsage(val *LlmUsage) *NullableLlmUsage {
	return &NullableLlmUsage{value: val, isSet: true}
}

func (v NullableLlmUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLlmUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

