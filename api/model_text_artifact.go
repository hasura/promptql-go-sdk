/*
PromptQL API

PromptQL API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TextArtifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextArtifact{}

// TextArtifact struct for TextArtifact
type TextArtifact struct {
	Identifier string `json:"identifier"`
	Title string `json:"title"`
	ArtifactType string `json:"artifact_type"`
	Data string `json:"data"`
}

type _TextArtifact TextArtifact

// NewTextArtifact instantiates a new TextArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextArtifact(identifier string, title string, artifactType string, data string) *TextArtifact {
	this := TextArtifact{}
	this.Identifier = identifier
	this.Title = title
	this.ArtifactType = artifactType
	this.Data = data
	return &this
}

// NewTextArtifactWithDefaults instantiates a new TextArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextArtifactWithDefaults() *TextArtifact {
	this := TextArtifact{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *TextArtifact) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *TextArtifact) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *TextArtifact) SetIdentifier(v string) {
	o.Identifier = v
}

// GetTitle returns the Title field value
func (o *TextArtifact) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TextArtifact) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TextArtifact) SetTitle(v string) {
	o.Title = v
}

// GetArtifactType returns the ArtifactType field value
func (o *TextArtifact) GetArtifactType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtifactType
}

// GetArtifactTypeOk returns a tuple with the ArtifactType field value
// and a boolean to check if the value has been set.
func (o *TextArtifact) GetArtifactTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtifactType, true
}

// SetArtifactType sets field value
func (o *TextArtifact) SetArtifactType(v string) {
	o.ArtifactType = v
}

// GetData returns the Data field value
func (o *TextArtifact) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TextArtifact) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TextArtifact) SetData(v string) {
	o.Data = v
}

func (o TextArtifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["title"] = o.Title
	toSerialize["artifact_type"] = o.ArtifactType
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *TextArtifact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"title",
		"artifact_type",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextArtifact := _TextArtifact{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varTextArtifact)

	if err != nil {
		return err
	}

	*o = TextArtifact(varTextArtifact)

	return err
}

type NullableTextArtifact struct {
	value *TextArtifact
	isSet bool
}

func (v NullableTextArtifact) Get() *TextArtifact {
	return v.value
}

func (v *NullableTextArtifact) Set(val *TextArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableTextArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableTextArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextArtifact(val *TextArtifact) *NullableTextArtifact {
	return &NullableTextArtifact{value: val, isSet: true}
}

func (v NullableTextArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

