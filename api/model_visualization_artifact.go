/*
PromptQL API

PromptQL API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VisualizationArtifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationArtifact{}

// VisualizationArtifact struct for VisualizationArtifact
type VisualizationArtifact struct {
	Identifier string `json:"identifier"`
	Title string `json:"title"`
	ArtifactType string `json:"artifact_type"`
	// Visualization data containing HTML and visualization data
	Data VisualizationArtifactData `json:"data"`
}

type _VisualizationArtifact VisualizationArtifact

// NewVisualizationArtifact instantiates a new VisualizationArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationArtifact(identifier string, title string, artifactType string, data VisualizationArtifactData) *VisualizationArtifact {
	this := VisualizationArtifact{}
	this.Identifier = identifier
	this.Title = title
	this.ArtifactType = artifactType
	this.Data = data
	return &this
}

// NewVisualizationArtifactWithDefaults instantiates a new VisualizationArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationArtifactWithDefaults() *VisualizationArtifact {
	this := VisualizationArtifact{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *VisualizationArtifact) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *VisualizationArtifact) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *VisualizationArtifact) SetIdentifier(v string) {
	o.Identifier = v
}

// GetTitle returns the Title field value
func (o *VisualizationArtifact) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *VisualizationArtifact) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *VisualizationArtifact) SetTitle(v string) {
	o.Title = v
}

// GetArtifactType returns the ArtifactType field value
func (o *VisualizationArtifact) GetArtifactType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtifactType
}

// GetArtifactTypeOk returns a tuple with the ArtifactType field value
// and a boolean to check if the value has been set.
func (o *VisualizationArtifact) GetArtifactTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtifactType, true
}

// SetArtifactType sets field value
func (o *VisualizationArtifact) SetArtifactType(v string) {
	o.ArtifactType = v
}

// GetData returns the Data field value
func (o *VisualizationArtifact) GetData() VisualizationArtifactData {
	if o == nil {
		var ret VisualizationArtifactData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *VisualizationArtifact) GetDataOk() (*VisualizationArtifactData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *VisualizationArtifact) SetData(v VisualizationArtifactData) {
	o.Data = v
}

func (o VisualizationArtifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["title"] = o.Title
	toSerialize["artifact_type"] = o.ArtifactType
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *VisualizationArtifact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"title",
		"artifact_type",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisualizationArtifact := _VisualizationArtifact{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVisualizationArtifact)

	if err != nil {
		return err
	}

	*o = VisualizationArtifact(varVisualizationArtifact)

	return err
}

type NullableVisualizationArtifact struct {
	value *VisualizationArtifact
	isSet bool
}

func (v NullableVisualizationArtifact) Get() *VisualizationArtifact {
	return v.value
}

func (v *NullableVisualizationArtifact) Set(val *VisualizationArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationArtifact(val *VisualizationArtifact) *NullableVisualizationArtifact {
	return &NullableVisualizationArtifact{value: val, isSet: true}
}

func (v NullableVisualizationArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


