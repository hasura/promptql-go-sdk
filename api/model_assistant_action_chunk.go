/*
PromptQL API

PromptQL API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssistantActionChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantActionChunk{}

// AssistantActionChunk struct for AssistantActionChunk
type AssistantActionChunk struct {
	Message NullableString `json:"message,omitempty"`
	Plan NullableString `json:"plan,omitempty"`
	Code NullableString `json:"code,omitempty"`
	CodeOutput NullableString `json:"code_output,omitempty"`
	CodeError NullableString `json:"code_error,omitempty"`
	Type string `json:"type"`
	Index int32 `json:"index"`
}

type _AssistantActionChunk AssistantActionChunk

// NewAssistantActionChunk instantiates a new AssistantActionChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantActionChunk(type_ string, index int32) *AssistantActionChunk {
	this := AssistantActionChunk{}
	this.Type = type_
	this.Index = index
	return &this
}

// NewAssistantActionChunkWithDefaults instantiates a new AssistantActionChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantActionChunkWithDefaults() *AssistantActionChunk {
	this := AssistantActionChunk{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantActionChunk) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantActionChunk) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *AssistantActionChunk) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *AssistantActionChunk) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *AssistantActionChunk) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *AssistantActionChunk) UnsetMessage() {
	o.Message.Unset()
}

// GetPlan returns the Plan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantActionChunk) GetPlan() string {
	if o == nil || IsNil(o.Plan.Get()) {
		var ret string
		return ret
	}
	return *o.Plan.Get()
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantActionChunk) GetPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plan.Get(), o.Plan.IsSet()
}

// HasPlan returns a boolean if a field has been set.
func (o *AssistantActionChunk) HasPlan() bool {
	if o != nil && o.Plan.IsSet() {
		return true
	}

	return false
}

// SetPlan gets a reference to the given NullableString and assigns it to the Plan field.
func (o *AssistantActionChunk) SetPlan(v string) {
	o.Plan.Set(&v)
}
// SetPlanNil sets the value for Plan to be an explicit nil
func (o *AssistantActionChunk) SetPlanNil() {
	o.Plan.Set(nil)
}

// UnsetPlan ensures that no value is present for Plan, not even an explicit nil
func (o *AssistantActionChunk) UnsetPlan() {
	o.Plan.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantActionChunk) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantActionChunk) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *AssistantActionChunk) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *AssistantActionChunk) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *AssistantActionChunk) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *AssistantActionChunk) UnsetCode() {
	o.Code.Unset()
}

// GetCodeOutput returns the CodeOutput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantActionChunk) GetCodeOutput() string {
	if o == nil || IsNil(o.CodeOutput.Get()) {
		var ret string
		return ret
	}
	return *o.CodeOutput.Get()
}

// GetCodeOutputOk returns a tuple with the CodeOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantActionChunk) GetCodeOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CodeOutput.Get(), o.CodeOutput.IsSet()
}

// HasCodeOutput returns a boolean if a field has been set.
func (o *AssistantActionChunk) HasCodeOutput() bool {
	if o != nil && o.CodeOutput.IsSet() {
		return true
	}

	return false
}

// SetCodeOutput gets a reference to the given NullableString and assigns it to the CodeOutput field.
func (o *AssistantActionChunk) SetCodeOutput(v string) {
	o.CodeOutput.Set(&v)
}
// SetCodeOutputNil sets the value for CodeOutput to be an explicit nil
func (o *AssistantActionChunk) SetCodeOutputNil() {
	o.CodeOutput.Set(nil)
}

// UnsetCodeOutput ensures that no value is present for CodeOutput, not even an explicit nil
func (o *AssistantActionChunk) UnsetCodeOutput() {
	o.CodeOutput.Unset()
}

// GetCodeError returns the CodeError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantActionChunk) GetCodeError() string {
	if o == nil || IsNil(o.CodeError.Get()) {
		var ret string
		return ret
	}
	return *o.CodeError.Get()
}

// GetCodeErrorOk returns a tuple with the CodeError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantActionChunk) GetCodeErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CodeError.Get(), o.CodeError.IsSet()
}

// HasCodeError returns a boolean if a field has been set.
func (o *AssistantActionChunk) HasCodeError() bool {
	if o != nil && o.CodeError.IsSet() {
		return true
	}

	return false
}

// SetCodeError gets a reference to the given NullableString and assigns it to the CodeError field.
func (o *AssistantActionChunk) SetCodeError(v string) {
	o.CodeError.Set(&v)
}
// SetCodeErrorNil sets the value for CodeError to be an explicit nil
func (o *AssistantActionChunk) SetCodeErrorNil() {
	o.CodeError.Set(nil)
}

// UnsetCodeError ensures that no value is present for CodeError, not even an explicit nil
func (o *AssistantActionChunk) UnsetCodeError() {
	o.CodeError.Unset()
}

// GetType returns the Type field value
func (o *AssistantActionChunk) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AssistantActionChunk) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AssistantActionChunk) SetType(v string) {
	o.Type = v
}

// GetIndex returns the Index field value
func (o *AssistantActionChunk) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *AssistantActionChunk) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *AssistantActionChunk) SetIndex(v int32) {
	o.Index = v
}

func (o AssistantActionChunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantActionChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Plan.IsSet() {
		toSerialize["plan"] = o.Plan.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.CodeOutput.IsSet() {
		toSerialize["code_output"] = o.CodeOutput.Get()
	}
	if o.CodeError.IsSet() {
		toSerialize["code_error"] = o.CodeError.Get()
	}
	toSerialize["type"] = o.Type
	toSerialize["index"] = o.Index
	return toSerialize, nil
}

func (o *AssistantActionChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistantActionChunk := _AssistantActionChunk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varAssistantActionChunk)

	if err != nil {
		return err
	}

	*o = AssistantActionChunk(varAssistantActionChunk)

	return err
}

type NullableAssistantActionChunk struct {
	value *AssistantActionChunk
	isSet bool
}

func (v NullableAssistantActionChunk) Get() *AssistantActionChunk {
	return v.value
}

func (v *NullableAssistantActionChunk) Set(val *AssistantActionChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantActionChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantActionChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantActionChunk(val *AssistantActionChunk) *NullableAssistantActionChunk {
	return &NullableAssistantActionChunk{value: val, isSet: true}
}

func (v NullableAssistantActionChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantActionChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

